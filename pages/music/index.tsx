import {useCallback, useEffect, useMemo, useState} from "react"

import {DatabasesQueryResponse} from "@notionhq/client/build/src/api-endpoints"
import {Box, Flex} from "components/atoms"
import {SearchBar} from "components/organisms/global/SearchBar"
import {MusicAlbumCard} from "components/organisms/music/MusicAlbumCard"
import {TEMPLATE_A_TOP_BAR_MD_HEIGHT, TEMPLATE_A_TOP_BAR_SM_HEIGHT,TemplateA} from "components/templates/TemplateA"
import Head from "next/head"
import {zIndex} from "theme"
import {getMusicAlbumRatingOrder, MusicAlbumData, MusicAlbumRating, MusicAlbumTag,notion, notionFileUrlPrefix} from "utils/notion"



export type MusicProps = {
  database: DatabasesQueryResponse | null;
}

const getSrc = (key: string | undefined, notionFileUrlPrefix: string, tagList: MusicAlbumTag[]) => {
  if (tagList?.includes(MusicAlbumTag.BLOCKED_COVER)){
    return `${notionFileUrlPrefix}/music-album-covers/blocked.jpg` 
  }
  else {
    return key ? `${notionFileUrlPrefix}/music-album-covers/${key}.jpg` : undefined
  }
}

export const refineAlbumData = (item: MusicAlbumData) => {

  const artistList = (item.properties.Artist?.multi_select || []).map(item=>item.name) as string[]; 

  const rating = item.properties.Rating?.select.name as MusicAlbumRating;

  const releasedString = item.properties.Released?.date.start; // "1990-7-10"
  const released = releasedString ? Date.parse(releasedString) : undefined

  const rym = item.properties.RYM?.url;

  const reviewKor = item.properties["Review KOR"]?.rich_text[0]?.plain_text;
  const reviewEng = item.properties["Review ENG"]?.rich_text[0]?.plain_text;
  const reviewJpn = item.properties["Review JPN"]?.rich_text[0]?.plain_text;

  const tagList = (item.properties.Tags?.multi_select || []).map(item=>item.name) as MusicAlbumTag[]; 
  const title = item.properties.Title?.title[0].plain_text;

  const key = item.properties.Key?.rich_text[0]?.plain_text;

  const src = getSrc(key, notionFileUrlPrefix, tagList);

  const performer = item.properties.Key?.rich_text[0]?.plain_text;

  return ({
    ...item,
    essence: {
      artistList,
      rating,
      released,
      rym,
      tagList,
      title,
      key,
      src,
      performer,
      reviewKor,
      reviewEng,
      reviewJpn,
    }
  })
}

const SEARCH_BAR_CONTAINER_HEIGHT = ["64px", "72px", "90px", "90px"]

export default function Music({
  database,
}:MusicProps) {
  
  const albumDataList: MusicAlbumData[] = useMemo(()=>{ 
    const filteredAlbumDataList = database?.results.filter((item: MusicAlbumData) => {
      const title = item.properties.Title?.title[0]?.plain_text;
      return title ? true : false
    })

    console.log("raw album-list: ", filteredAlbumDataList)

    const refinedAlbumDataList = (filteredAlbumDataList || []).map(refineAlbumData)

    const sortedAlbumDataList = refinedAlbumDataList.sort((a, b)=>{
      return (getMusicAlbumRatingOrder(b.essence.rating) - getMusicAlbumRatingOrder(a.essence.rating))
    });

    return sortedAlbumDataList
  }, [database?.results]);

  return (
    <TemplateA>
      <Head>
        <title>Music</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex>

        <Box sx={{
          position: "fixed", 
          top: [TEMPLATE_A_TOP_BAR_SM_HEIGHT, TEMPLATE_A_TOP_BAR_MD_HEIGHT, 0, 0], 
          height: SEARCH_BAR_CONTAINER_HEIGHT,
          zIndex: zIndex.searchBar,
        }}>
          <SearchBar/>
        </Box>

        <Flex 
          sx={{
            p: 3, 
            flexDirection: "row", 
            justifyContent: "flex-start", 
            flexWrap: "wrap",
            pt: SEARCH_BAR_CONTAINER_HEIGHT,
          }}
        >
          {albumDataList?.map((item, index)=>(
            <Box
              key={`album-${item?.essence?.title || index}`} 
              sx={{
                lineHeight: 0, 
                p: 4,
                width: ["calc(100% / 2)", "calc(100% / 3)", "calc(100% / 5)", "240px"],
              }}
            >
              <MusicAlbumCard
                data={item}
              ></MusicAlbumCard>
            </Box>
          )
          )}
        </Flex>
        
      </Flex>
    </TemplateA>
  )
}

export async function getServerSideProps() {
   
  try { 
    const database = await notion.databases.query({database_id: process.env.NEXT_PUBLIC_NOTION_MUSIC_DB_ID || ""});
    return {props: { 
      database,
    }}
  }
  catch {
    return {props: { 
      database: null, 
    }}
  }
}