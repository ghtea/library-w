import { useCallback, useEffect, useMemo, useState } from "react"

import { DatabasesQueryResponse } from "@notionhq/client/build/src/api-endpoints"
import { Page } from "@notionhq/client/build/src/api-types"
import { TemplateA } from "components/templates"
import { Box,Flex } from "components-old/atoms"
import { notion } from "libraries/notion"
import { MusicAlbumPropertyValueMap } from "libraries/notion/types"
import Head from "next/head"
import Image from "next/image"


export type MusicProps = {
  database: DatabasesQueryResponse | null;
  notionFileUrlPrefix?: string;
}

export type MusicAlbum = Page & {
  properties: MusicAlbumPropertyValueMap; // PropertyValueMap
}

export default function Music({
  database,
  notionFileUrlPrefix
}:MusicProps) {
  
  const albumList: MusicAlbum[] = useMemo(()=>{ 
    const newAlbumList = database?.results.filter((item: MusicAlbum) => {
      const name = item.properties.Name?.title[0]?.plain_text;
      return name ? true : false
    })
    return newAlbumList || [] 
  }, [database]);

  useEffect(()=>{
    console.log(albumList)
  }, [albumList])
  
  return (
    <TemplateA>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex>

        <Flex sx={{flexDirection: "row", flexWrap: "wrap"}}>
          {albumList?.map((item, index)=>{

            const name = item.properties.Name?.title[0]
            const key = item.properties.Key?.rich_text[0]?.plain_text

            const src = key ? `${notionFileUrlPrefix}/music-album-covers/${key}.jpg` : undefined;
            
            return(
              <Box key={`album-${item.id}`} sx={{lineHeight: 0, margin: "4px"}}>
                {src &&
                  <Image width={"300px"} height={"300px"} alt={`album cover of ${name}`} src={src}/>
                }
              </Box>
            )
          })}
        </Flex>
        
      </Flex>
    </TemplateA>
    
  )
}

export async function getServerSideProps() {
   
  try { 
    const database = await notion.databases.query({ database_id: process.env.NOTION_MUSIC_DB_ID || "" });
    return { props: { 
      database,
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX,
    } }
  }
  catch {
    return { props: { 
      database: null, 
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX } }
  }
}


