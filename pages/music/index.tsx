import { useCallback, useEffect, useMemo, useState } from "react"

import { DatabasesQueryResponse } from "@notionhq/client/build/src/api-endpoints"
import { Page } from "@notionhq/client/build/src/api-types"
import { Box } from "components/atoms/Box"
import { Flex } from "components/atoms/Flex"
import { Album } from "components/organisms/Album"
import { TemplateA } from "components/templates/TemplateA"
import Head from "next/head"
import { notion } from "tools/notion"
import { MusicAlbumPropertyValueMap } from "tools/notion/types"


export type MusicProps = {
  database: DatabasesQueryResponse | null;
  notionFileUrlPrefix?: string;
}

export type AlbumData = Page & {
  properties: MusicAlbumPropertyValueMap; // PropertyValueMap
}


export default function Music({
  database,
  notionFileUrlPrefix
}:MusicProps) {
  
  const albumList: AlbumData[] = useMemo(()=>{ 
    const newAlbumList = database?.results.filter((item: AlbumData) => {
      const name = item.properties.Name?.title[0]?.plain_text;
      return name ? true : false
    })
    return newAlbumList || [] 
  }, [database]);

  useEffect(()=>{
    console.log(albumList)
  }, [albumList])
  
  return (
    <TemplateA>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex>

        <Flex sx={{ p: 3, flexDirection: "row", justifyContent: "flex-start", flexWrap: "wrap"}}>
          {albumList?.map((item, index)=>(
            <Box
              key={`album-${item.id}`} 
              sx={{
                lineHeight: 0, 
                p: 4,
                width: ["50%", "33%", "20%", "240px"],
              }}
            >
              <Album
                data={item}
                notionFileUrlPrefix={notionFileUrlPrefix}
              ></Album>
            </Box>
          )
          )}
        </Flex>
        
      </Flex>
    </TemplateA>
  )
}

export async function getServerSideProps() {
   
  try { 
    const database = await notion.databases.query({ database_id: process.env.NOTION_MUSIC_DB_ID || "" });
    return { props: { 
      database,
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX,
    } }
  }
  catch {
    return { props: { 
      database: null, 
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX } }
  }
}


