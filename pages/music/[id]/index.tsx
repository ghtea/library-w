import { useCallback, useEffect, useMemo, useState } from "react"

import { PagesRetrieveResponse } from "@notionhq/client/build/src/api-endpoints"
import { NumberFormulaValue, Page } from "@notionhq/client/build/src/api-types"
import { Box } from "components/atoms/Box"
import { Flex } from "components/atoms/Flex"
import { AlbumCard } from "components/organisms/music/AlbumCard"
import { TemplateA } from "components/templates/TemplateA"
import { GetServerSideProps } from "next"
import Head from "next/head"
import { notion } from "tools/notion"
import { MusicAlbumPropertyValueMap } from "tools/notion/types"


export type MusicAlbumProps = {
  page: PagesRetrieveResponse | null;
  notionFileUrlPrefix?: string;
}

export type AlbumData = Page & {
  properties: MusicAlbumPropertyValueMap; // PropertyValueMap
  essence?: AlbumEssence
}

export type AlbumEssence = {
  title?: string;
  artist?: string;
  key?: string;
  src?: string;
  score?: number;
  rank?: number;
  rym?: string;
}


export default function MusicAlbum({
  page,
  notionFileUrlPrefix
}:MusicAlbumProps) {
  
  // const albumDataList: AlbumData[] = useMemo(()=>{ 
  //   const filteredAlbumDataList = database?.results.filter((item: AlbumData) => {
  //     const name = item.properties.Name?.title[0]?.plain_text;
  //     return name ? true : false
  //   })

  //   console.log("raw album-list: ", filteredAlbumDataList)

  //   const refinedAlbumDataList = (filteredAlbumDataList || []).map((item: AlbumData)=>{
      
  //     const title = item.properties.Name?.title[0].plain_text;
  //     const artist = item.properties.Artist?.rich_text[0]?.plain_text;

  //     const key = item.properties.Key?.rich_text[0]?.plain_text;
  //     const src = key ? `${notionFileUrlPrefix}/music-album-covers/${key}.jpg` : undefined;
    
  //     const score = ((item.properties.Score?.formula as NumberFormulaValue) || {}).number;
  //     const rym = item.properties.RYM?.url;

  //     return ({
  //       ...item,
  //       essence: {
  //         title,
  //         artist,
  //         key,
  //         src,
  //         score,
  //         rym,
  //       }
  //     })
  //   })

  //   const sortedAlbumDataList = refinedAlbumDataList.sort((a, b)=>{
  //     return ((b.essence.score || 0) - (a.essence.score || 0))
  //   });

  //   const addedAlbumDataList = sortedAlbumDataList.map((item, index)=>{
  //     return ({
  //       ...item,
  //       essence: {
  //         ...item.essence,
  //         rank: index + 1,
  //       }
  //     })
  //   });

  //   return addedAlbumDataList
  // }, [database?.results, notionFileUrlPrefix]);

  return (
    <TemplateA>
      <Head>
        <title>Music</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex>

        <Flex>
          
        </Flex>
        
      </Flex>
    </TemplateA>
  )
}

export  const getServerSideProps: GetServerSideProps = async (context) => {
   
  try { 
    const musicAlbumId = context?.params?.id;

    if (typeof musicAlbumId !== "string") throw Error("id of album is not valid");

    const page = await notion.pages.retrieve({ page_id: musicAlbumId || "" });

    console.log(page);

    return { props: { 
      page,
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX,
    } }
  }
  catch {
    return { props: { 
      page: null, 
      notionFileUrlPrefix: process.env.NOTION_FILE_URL_PREFIX } }
  }
}


