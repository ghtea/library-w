import React, { useCallback, useEffect, useMemo, useState } from "react"

import { PagesRetrieveResponse } from "@notionhq/client/build/src/api-endpoints"
import { NumberFormulaValue, Page } from "@notionhq/client/build/src/api-types"
import { Box } from "components/atoms/Box"
import { Divider } from "components/atoms/Divider"
import { Flex } from "components/atoms/Flex"
import { Heading } from "components/atoms/Heading"
import { Paragraph } from "components/atoms/Paragraph"
import { Ratio } from "components/atoms/Ratio"
import { Text } from "components/atoms/Text"
import { AlbumCard } from "components/organisms/music/AlbumCard"
import { TemplateA } from "components/templates/TemplateA"
import { GetServerSideProps } from "next"
import Head from "next/head"
import Image from "next/image"
import { refineAlbumData } from "pages/music"
import { ColorKey } from "theme"
import { notion } from "tools/notion"

import { MusicAlbumData } from "../types"


export type MusicAlbumProps = {
  page: PagesRetrieveResponse | null;
}


export default function MusicAlbum({
  page,
}:MusicAlbumProps) {
  
  const albumData: MusicAlbumData | null = useMemo(
    ()=> page ?  refineAlbumData(page) : null, 
    [page] 
  );

  const {title, artist, key, src, rating, performer, released, reviewEng, reviewKor} = useMemo(
    ()=> albumData ? (albumData.essence || {}) : {},[albumData]
  )

  const dateText = useMemo(()=>{
    if (!released) return "";
    const releasedDate = new Date(released);
    const year = releasedDate.getFullYear();
    const month = releasedDate.getMonth();
    const dayOfMonth = releasedDate.getDate();
    return `${year}.${month}.${dayOfMonth}`
  },[released])
  
  return (
    <TemplateA>
      <Head>
        <title>Music</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex sx={{width: ["100%", null, null, "90%"], p: 4}}>
        
        { !page ? <Text> no album</Text> : (
          <Flex 
            sx={{
              flexDirection: "row", 
              justifyContent: "center", 
              alignItems: "center", // TODO: not stretch as I want...
              width: "100%", 
              maxWidth: "900px"
            }}
          >
            <Box sx={{width: "33%"}}>
              <Ratio>
                {/* TODO: add border-radius to image */}
                {src &&
                  <Image 
                    layout={"responsive"} width={"100%"} height={"100%"} 
                    alt={`album cover of ${title}`} 
                    src={src}
                  />
                }
              </Ratio>
            </Box>
          
            <Box sx={{width: "66%", height: "100%"}}>
              <Flex sx={{height: "100%"}}>
                <Heading as={"h1"} sx={{fontSize: ["1.4rem", "1.6rem", "2rem", null]}} >{title}</Heading>
                <Text sx={{fontSize: "1.3rem"}}>{artist}</Text>
                <Text sx={{fontSize: "1.2rem"}}>{dateText}</Text>
                {/* TODO: score, rank */}
              </Flex>
            </Box>

          </Flex>
        )}

        <Divider sx={{width: "100%"}}/>

        <Box>
          <Flex>
            <Paragraph>{reviewKor}</Paragraph>
          </Flex>
        </Box>
    
      </Flex>
    </TemplateA>
  )
}

export  const getServerSideProps: GetServerSideProps = async (context) => {
   
  try { 
    const musicAlbumId = context?.params?.id;

    if (typeof musicAlbumId !== "string") throw Error("id of album is not valid");

    const page = await notion.pages.retrieve({ page_id: musicAlbumId || "" });

    console.log(page);

    return { props: { 
      page,
    } }
  }
  catch {
    return { props: { 
      page: null, 
    }}
  }
}


